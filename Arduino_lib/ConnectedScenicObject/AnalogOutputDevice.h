// Copyright (c) 2019 UMONS - numediart - CLICK'
// 
// This library is free software; you can redistribute it and/or
// modify it under the terms of the GNU Lesser General Public
// License as published by the Free Software Foundation; either
// version 2.1 of the License, or (at your option) any later version.
// 
// This library is distributed in the hope that it will be useful,
// but WITHOUT ANY WARRANTY; without even the implied warranty of
// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
// Lesser General Public License for more details.
// 
// You should have received a copy of the GNU Lesser General Public
// License along with this library; if not, write to the Free Software
// Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA  02110-1301  USA


#ifndef ANALOG_OUTPUT_DEVICE_H
#define ANALOG_OUTPUT_DEVICE_H

#include "GenericDevice.h"

#define maxWaveform 4
#define maxSamplesNum 120
#define minFreq 0.1f
#define maxFreq 100.0f

static uint8_t waveformsTable[maxWaveform][maxSamplesNum] = {
  // Sin wave
  {
    0x80, 0x87, 0x8D, 0x94, 0x9B, 0xA1, 0xA8, 0xAE, 0xB4, 0xBA, 
    0xC0, 0xC6, 0xCB, 0xD1, 0xD6, 0xDA, 0xDF, 0xE3, 0xE7, 0xEB, 
    0xEF, 0xF2, 0xF5, 0xF7, 0xFA, 0xFC, 0xFD, 0xFE, 0xFF, 0xFF, 
    0xFF, 0xFF, 0xFF, 0xFE, 0xFD, 0xFC, 0xFA, 0xF7, 0xF5, 0xF2, 
    0xEF, 0xEB, 0xE7, 0xE3, 0xDF, 0xDA, 0xD6, 0xD1, 0xCB, 0xC6, 
    0xC0, 0xBA, 0xB4, 0xAE, 0xA8, 0xA1, 0x9B, 0x94, 0x8D, 0x87, 
    0x80, 0x79, 0x73, 0x6C, 0x65, 0x5F, 0x58, 0x52, 0x4C, 0x46, 
    0x40, 0x3A, 0x35, 0x2F, 0x2A, 0x25, 0x21, 0x1D, 0x18, 0x15, 
    0x11, 0x0E, 0x0B, 0x08, 0x06, 0x04, 0x03, 0x02, 0x01, 0x00, 
    0x00, 0x00, 0x01, 0x02, 0x03, 0x04, 0x06, 0x08, 0x0B, 0x0E, 
    0x11, 0x15, 0x18, 0x1D, 0x21, 0x25, 0x2A, 0x2F, 0x35, 0x3A, 
    0x40, 0x46, 0x4C, 0x52, 0x58, 0x5F, 0x65, 0x6C, 0x73, 0x79
  }
  ,
  // Triangular wave
  {
    0x04, 0x09, 0x0D, 0x11, 0x15, 0x1A, 0x1E, 0x22, 0x26, 0x2B, 
    0x2F, 0x33, 0x37, 0x3C, 0x40, 0x44, 0x48, 0x4D, 0x51, 0x55, 
    0x59, 0x5E, 0x62, 0x66, 0x6A, 0x6F, 0x73, 0x77, 0x7B, 0x80, 
    0x84, 0x88, 0x8C, 0x91, 0x95, 0x99, 0x9D, 0xA2, 0xA6, 0xAA, 
    0xAE, 0xB3, 0xB7, 0xBB, 0xBF, 0xC4, 0xC8, 0xCC, 0xD0, 0xD5, 
    0xD9, 0xDD, 0xE1, 0xE6, 0xEA, 0xEE, 0xF2, 0xF7, 0xFB, 0xFF, 
    0xFB, 0xF7, 0xF2, 0xEE, 0xEA, 0xE6, 0xE1, 0xDD, 0xD9, 0xD5, 
    0xD0, 0xCC, 0xC8, 0xC4, 0xBF, 0xBB, 0xB7, 0xB3, 0xAE, 0xAA, 
    0xA6, 0xA2, 0x9D, 0x99, 0x95, 0x91, 0x8C, 0x88, 0x84, 0x80, 
    0x7B, 0x77, 0x73, 0x6F, 0x6A, 0x66, 0x62, 0x5E, 0x59, 0x55, 
    0x51, 0x4D, 0x48, 0x44, 0x40, 0x3C, 0x37, 0x33, 0x2F, 0x2B, 
    0x26, 0x22, 0x1E, 0x1A, 0x15, 0x11, 0x0D, 0x09, 0x04, 0x00
  }
  ,
  // Sawtooth wave
  {
    0x02, 0x04, 0x06, 0x09, 0x0B, 0x0D, 0x0F, 0x11, 0x13, 0x15, 
    0x17, 0x1A, 0x1C, 0x1E, 0x20, 0x22, 0x24, 0x26, 0x28, 0x2B, 
    0x2D, 0x2F, 0x31, 0x33, 0x35, 0x37, 0x39, 0x3C, 0x3E, 0x40, 
    0x42, 0x44, 0x46, 0x48, 0x4A, 0x4D, 0x4F, 0x51, 0x53, 0x55, 
    0x57, 0x59, 0x5B, 0x5E, 0x60, 0x62, 0x64, 0x66, 0x68, 0x6A, 
    0x6C, 0x6F, 0x71, 0x73, 0x75, 0x77, 0x79, 0x7B, 0x7D, 0x80, 
    0x82, 0x84, 0x86, 0x88, 0x8A, 0x8C, 0x8E, 0x91, 0x93, 0x95, 
    0x97, 0x99, 0x9B, 0x9D, 0x9F, 0xA2, 0xA4, 0xA6, 0xA8, 0xAA, 
    0xAC, 0xAE, 0xB0, 0xB3, 0xB5, 0xB7, 0xB9, 0xBB, 0xBD, 0xBF, 
    0xC1, 0xC4, 0xC6, 0xC8, 0xCA, 0xCC, 0xCE, 0xD0, 0xD2, 0xD5, 
    0xD7, 0xD9, 0xDB, 0xDD, 0xDF, 0xE1, 0xE3, 0xE6, 0xE8, 0xEA, 
    0xEC, 0xEE, 0xF0, 0xF2, 0xF4, 0xF7, 0xF9, 0xFB, 0xFD, 0xFF
  }
  ,
  // Square wave
  {
    0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
    0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
    0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
    0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
    0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
    0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00
  }
};


class AnalogOutputDevice: public GenericDevice {
  protected:
    static uint8_t nbInstances;
    uint8_t _id;
    uint8_t _pin;
    
    uint8_t _value;
    uint8_t _targetValue;
    
    bool _ramp;
    uint8_t _rampValInit;
    uint32_t _rampDuration;
    uint32_t _rampT0millis;

    int _waveformType;
    float _waveformFreq;
    uint32_t _waveformT0micros;
    
  public:
    AnalogOutputDevice(uint8_t pin, uint8_t initVal = 0);
    virtual void init();
    virtual OscMessage update();
    virtual void oscCallback(OscMessage& m);
    virtual std::vector<int> usedPins();
};

#endif

